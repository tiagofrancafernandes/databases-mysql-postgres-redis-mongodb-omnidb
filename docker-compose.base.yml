version: '3.7'
services:
  pg:
    image: mdillon/postgis
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
      #- "1010:5432"
      #- "5432:5432"
    volumes:
      # - postgres:/var/lib/postgresql/data
      - external-postgres-volume:/var/lib/postgresql/data
      - ./_dev_local:/_dev_local

  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT:-6379}:6379"

  mongodb:
    image: mongo:latest
    ports:
      - "${MONGO_PORT:-27017}:27017"

  omnidb:
    image: taivokasper/omnidb
    volumes:
      # - config-omnidb:/etc/omnidb
      - external-config-omnidb:/etc/omnidb
    ports:
      - "${OMNIDB_PORT:-8080}:8080"
      - "25482:25482"

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_DEFAULT_EMAIL:-pg@admin.com}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_DEFAULT_PASSWORD:-postgres}"
    ports:
      - "${PGADMIN_PORT:-8090}:80"
    depends_on:
      - pg

  #MySQL Service
  mysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_DB_PASSWORD:-mysql}
      MYSQL_DATABASE: "mysql"
    ports:
      - "${MYSQL_DB_PORT:-3306}:3306"
    expose:
      - ${MYSQL_DB_PORT:-3306}
    volumes:
      # - "$DOCKER_CONFIG_PATH/$MYSQL_DATA_DIR:/var/lib/mysql"
      - external-mysql-data:/var/lib/mysql
    networks:
      - app-network

  # mailhog:
  #   image: mailhog/mailhog
  #   restart: always
  #   ports:
  #     - "${MAILHOG_SMTP_PORT:-1025}:1025" ## SMTP Port
  #     - "${MAILHOG_WEB_UI_PORT:-8025}:8025" ## Web UI PORT
  #   networks:
  #     app-network:
  #       aliases:
  #         - ${MAILHOG_VIRTUAL_HOST:-mailhog.local}
  #         - mailhog

  mailpit:
    image: axllent/mailpit
    restart: always
    ports:
      - "${MAILPIT_SMTP_PORT:-1025}:1025" ## SMTP Port
      - "${MAILPIT_WEB_UI_PORT:-8025}:8025" ## Web UI PORT
    networks:
      app-network:
        aliases:
          - ${MAILPIT_VIRTUAL_HOST:-mailpit.local}
          - ${MAILHOG_VIRTUAL_HOST:-mailhog.local}
          - mailpit
          - mailhog

  php:
    image: php:8.1-rc-fpm-alpine
    tty: true
    ports:
      - "${PHP_DEV_SERVER_PORT:-7000}:7000"
    volumes:
      - "${PHP_DEV_SERVER_BASE_PATH:-./docker/php-utils/}:/var/www/apps"
    networks:
      app-network:
        aliases:
          - php-dev.local
    command: "php -S 0.0.0.0:7000 -t /var/www/apps"

  minio1:
      image: minio/minio:RELEASE.2020-08-18T19-41-00Z
      # container_name: db-app-minio1
      volumes:
          # - minio-data1-1:/data1
          # - minio-data1-2:/data2
          - "${MINIO_DATA_NODE1:-./docker/minio_data/nodes/node1}/data1:/data1"
          - "${MINIO_DATA_NODE1:-./docker/minio_data/nodes/node1}/data2:/data2"
      ports:
          - "${MINIO_WEB:-9001}:9000" ## Usado para vers찾o Web
          - "${MINIO_CONSOLE_WEB:-9091}:9090" ## Usado para vers찾o Web do Console
      environment:
          MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
          MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
          MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-admin}
          MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-password}
      command: server http://minio{1...2}/data{1...2}
      healthcheck:
          test:
              [
                  "CMD",
                  "curl",
                  "-f",
                  "http://localhost:9000/minio/health/live"
              ]
          interval: 30s
          timeout: 20s
          retries: 3
      networks:
        - app-network
      depends_on:
        - minio2

  minio2:
      image: minio/minio:RELEASE.2020-08-18T19-41-00Z
      # container_name: db-app-minio2
      volumes:
        #   - minio-data2-1:/data1
        #   - minio-data2-2:/data2
          - "${MINIO_DATA_NODE2:-./docker/minio_data/nodes/node2}/data1:/data1"
          - "${MINIO_DATA_NODE2:-./docker/minio_data/nodes/node2}/data2:/data2"
      environment:
          MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
          MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
          MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-admin}
          MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-password}
      command: server http://minio{1...2}/data{1...2}
      healthcheck:
          test:
              [
                  "CMD",
                  "curl",
                  "-f",
                  "http://localhost:9000/minio/health/live"
              ]
          interval: 30s
          timeout: 20s
          retries: 3
      networks:
        - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge

volumes:
  # postgres:
  external-postgres-volume: #docker volume create external-config-omnidb
    external: true

  ## Container volume
  # config-omnidb:

  ## Docker external volume (can be reused for another container)
  external-config-omnidb: #docker volume create external-config-omnidb
    external: true

  ## Container volume
  # mysql-data:

  ## Docker external volume (can be reused for another container)
  external-mysql-data: #docker volume create external-mysql-data
    external: true

  # ## Caso queira utilizar volumes din창micos, descomente as linhas de baixo e mude a sess찾o volumes de services.minio1 e services.minio2
  # minio-data1-1:
  # minio-data1-2:
  # minio-data2-1:
  # minio-data2-2:
